import os
from airflow.sdk import dag,task,get_current_context
from airflow.operators.trigger_dagrun import TriggerDagRunOperator
from airflow.providers.common.sql.operators.sql import SQLExecuteQueryOperator
from airflow.providers.postgres.hooks.postgres import PostgresHook


@dag()
def import_parquet_workflow():

    @task
    def initialize_variables():
        context = get_current_context()
        ti = context["ti"]
        ti.xcom_push(key="data_path",value="/opt/airflow/dags/files/parquet_file.parquet")
        ti.xcom_push(key="csv_path", value="/opt/airflow/dags/files/parquet_file.csv")


    transform_parquet_csv = TriggerDagRunOperator(trigger_dag_id="transform_parquet_csv",task_id="import_parquet")

    create_tables = TriggerDagRunOperator(trigger_dag_id="create_database_tables",task_id="create_tables")

    @task
    def get_data():
        postgres_hook = PostgresHook(postgres_conn_id="tutorial_pg_conn")

        conn = postgres_hook.get_conn()
        cur = conn.cursor()
        context=get_current_context()
        ti = context['ti']
        csv_path = ti.xcom_pull(key="csv_path", task_ids="initialize_variables")

        with open(csv_path, "r") as file:
            cur.copy_expert(
                "COPY weather_temp FROM STDIN WITH CSV HEADER DELIMITER AS ',' QUOTE '\"'",
                file,
            )
        conn.commit()



    @task
    def merge_data():
        query="""
        INSERT INTO weather ( 
        Id,
        MinTemp,
        MaxTemp,
        Rainfall,
        Evaporation,
        Sunshine,
        WindGustDir,
        WindGustSpeed ,
        WindDir9am,
        WindDir3pm,
        WindSpeed3pm ,
        WindSpeed9am,
        Humidity9am,
        Humidity3pm,
        Pressure9am,
        Pressure3pm,
        Cloud9am,
        Cloud3pm,
        Temp9am,
        Temp3pm,
        RainToday,
        RISK_MM,  
        RainTomorrow 
        )
    SELECT     
        Id,
        MinTemp,
        MaxTemp,
        Rainfall,
        Evaporation,
        Sunshine,
        WindGustDir,
        CASE
            WHEN WindGustSpeed='NA' THEN NULL,
            ELSE WindGustSpeed
        END,
        WindDir9am,
        WindDir3pm,
        CASE
            WHEN WindSpeed3pm='NA' THEN NULL,
            ELSE WindSpeed3pm
        END,
        CASE
            WHEN WindSpeed9am='NA' THEN NULL,
            ELSE WindSpeed9am
        END,
        Humidity9am,
        Humidity3pm,
        Pressure9am,
        Pressure3pm,
        Cloud9am,
        Cloud3pm,
        Temp9am,
        Temp3pm,
        RainToday,
        RISK_MM,  
        RainTomorrow
    FROM  weather_temp; 
        """
        try:
            postgres_hook = PostgresHook(postgres_conn_id="tutorial_pg_conn")
            conn = postgres_hook.get_conn()
            cur = conn.cursor()
            cur.execute(query)
            conn.commit()
            return 0
        except Exception as e:
            return 1

       

    initialize_variables() >> create_tables >> transform_parquet_csv >> get_data() >> merge_data()

import_parquet_workflow()